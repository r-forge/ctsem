% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/ctFit.R
\name{ctFit}
\alias{ctFit}
\title{Fit a ctsem object}
\usage{
ctFit(datawide, ctmodelobj, confidenceintervals = NULL,
  TDpredtype = "impulse", objective = "auto",
  stationary = c("T0TRAITEFFECT", "T0TIPREDEFFECT"), reasonable = TRUE,
  optimizer = "CSOLNP", retryattempts = 12, iterationSummary = TRUE,
  fit2beat = Inf, carefulFit = TRUE, showInits = FALSE,
  meanintervals = FALSE, plotOptimization = F, nofit = FALSE)
}
\arguments{
\item{datawide}{the data you wish to fit a ctsem model to.}

\item{ctmodelobj}{the ctsem model object you wish to use, specified via the \code{\link{ctModel}} function.}

\item{confidenceintervals}{vector of character strings of matrices
to calculate 95\% confidence intervals for.  e.g. c("DRIFT", "TRAITVAR")}

\item{TDpredtype}{if "impulse" (default) TDpredictors input a single shock.
If "level" they alter the base level of process, in some sense a variable CINT.}

\item{objective}{'auto' chooses either 'Kalman', if fitting to single subject data,
or 'mxRAM'. For single subject data, 'Kalman' uses the \code{\link{mxExpectationStateSpace}}
function from OpenMx to implement the Kalman filter.
For more than one subject, 'mxRAM' specifies a wide format SEM with a row of data per subject.
'mxFIML' is an alternative to 'mxRAM' which uses the mxExpectationML function from OpenMx,
this is faster but is not yet implemented for predictors, and requires the OpenMx library
to be loaded via \code{library(OpenMx)} before use.
See \code{\link{ctMultigroupFit}} for the possibility to apply the Kalman filter over multiple subjects)}

\item{stationary}{Character vector of T0 matrix names to constrain to stationarity.
Defaults to c('T0TRAITEFFECT', 'T0TIPREDEFFECT'), constraining only the between subject difference effects.
Can be set to NULL to force all T0 matrices to be estimated, can be
set to 'all' to constrain all T0 matrices to stationarity.}

\item{reasonable}{if TRUE, constrain variance parameters to positive values.
(speeds optimization, can help to optimize to a global optimum, but can also hinder)}

\item{optimizer}{character string, defaults to the open-source 'CSOLNP' optimizer that is distributed
in all versions of OpenMx. However, 'NPSOL' generally performs a little better for these problems
and is the recommended option. This requires that you have installed OpenMx manually, by running:
\code{source('http://openmx.psyc.virginia.edu/getOpenMx.R')}}

\item{retryattempts}{Number of times to retry the start value randomisation and fit procedure, if non-convergance or uncertain fits occur.}

\item{iterationSummary}{if TRUE, outputs limited fit details after every fit attempt.}

\item{fit2beat}{Passes this argument to mxTryHard function, defaults to Inf.  Specifies maximum acceptable likelihood (useful
if nested submodels already fit, forces optimiser to re-run until improved estimate found).}

\item{carefulFit}{if TRUE, first fits the specified model with a penalised likelihood function
to force MANIFESTVAR, DRIFT, TRAITVAR, MANIFESTTRAITVAR parameters to remain close to 0, then
fits the specified model normally, using these estimates as starting values.
Can help with optimization when extreme parameter estimates are returned,
though results in user specified inits being ignored for the final fit.}

\item{showInits}{if TRUE, prints the list of user specified and auto generated
starting values for free parameters.}

\item{meanintervals}{Use average time intervals for each column for calculation
(both faster and inaccurate to the extent that intervals vary across individuals).}

\item{plotOptimization}{If TRUE, uses checkpointing for \code{\link{mxRun}}, set to checkpoint every iteration,
output checkpoint file to working directory, then creates a plot for each parameter's values over iterations.}

\item{nofit}{if TRUE, output only openmx model without fitting}
}
\description{
This function fits continuous time SEM models specified via \code{\link{ctModel}}
to a dataset containing one or more subjects.
}
\details{
DATA STRUCTURE:
 Single row per subject. Manifest variables first, grouped by measurement occasion (with later measurements to the right),
 then 1st time dependent predictor (all observations 1:(Tpoints-1)), further time dependent predictors,
 time intervals between observations, time independent predictors.
}
\examples{
mfrowOld<-par()$mfrow
par(mfrow=c(2, 3))

### example from Driver, Oud, Voelkle (2015),
### simulated happiness and leisure time with unobserved heterogeneity.
data(ctExample1)
traitmodel <- ctModel(n.manifest=2, n.latent=2, Tpoints=6, LAMBDA=diag(2),
  manifestNames=c('LeisureTime', 'Happiness'),
  latentNames=c('LeisureTime', 'Happiness'), TRAITVAR="auto")
traitfit <- ctFit(datawide=ctExample1, ctmodelobj=traitmodel)
summary(traitfit)
plot(traitfit, wait=FALSE)

###Example from Voelkle, Oud, Davidov, and Schmidt (2012) - anomia and authoritarianism.
data(AnomAuth)
AnomAuthmodel <- ctModel(LAMBDA = matrix(c(1, 0, 0, 1), nrow = 2, ncol = 2),
Tpoints = 5, n.latent = 2, n.manifest = 2, MANIFESTVAR=diag(0, 2), TRAITVAR = NULL)
AnomAuthfit <- ctFit(AnomAuth, AnomAuthmodel)
summary(AnomAuthfit)
plot(AnomAuthfit, wait=FALSE)

par(mfrow=mfrowOld)

\dontrun{
###Oscillating model from Voelkle & Oud (2013).
data(Oscillating)
oscillatingm<-ctModel(n.latent = 2, n.manifest=1, Tpoints=11,
  MANIFESTVAR=matrix(c(0), nrow=1, ncol=1),
  LAMBDA=matrix(c(1, 0), nrow=1, ncol=2),
  DRIFT=matrix(c(0, "cross", 1, "auto"), nrow=2, ncol=2),
  CINT=matrix(0, ncol=1, nrow=2, ),
  DIFFUSION=matrix(c(0, 0, 0, "diffusion22"), nrow=2, ncol=2),
  inits=matrix(c("cross", -38, "auto", -.5, "diffusion22", 1,
    "T0var11", 1, "T0var22", 38, "m2", .9), byrow=TRUE, ncol=2))
oscillatingf<-ctFit(Oscillating, oscillatingm)
summary(oscillatingf)
plot(oscillatingf, wait=FALSE)
}
}

